# yaml-language-server: $schema=https://glasskube.dev/schemas/v1/package-manifest.json
apiVersion: packages.glasskube.dev/v1
kind: PackageManifest
name: sample-web-app
scope: Namespaced
defaultNamespace: sample-web-app
shortDescription: A sample Node.js web application
longDescription: |
  ## Sample Web App
  This is a sample Node.js web application that can be deployed to Kubernetes.
  
  ### Features
  - Simple Node.js server
  - Containerized with Docker
  - Deployed with Helm
  
  ### Getting Started
  Once deployed, you can access the application via your browser at your configured hostname.
  The application displays a simple "Hello World" page with Node.js information.

iconUrl: https://cdn-icons-png.flaticon.com/512/919/919825.png

# Using the Helm chart approach
helm:
  chartName: eap-distr-simulator
  chartVersion: 0.1.0
  # Using GitHub raw content URL
  repositoryUrl: https://raw.githubusercontent.com/pkhsu/glasskube-gitops-test/main/apps/sample-web-app/chart/

# Adding deployment manifests directly
manifests:
  - path: deployment.yaml
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: sample-web-app
        labels:
          app: sample-web-app
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: sample-web-app
        template:
          metadata:
            labels:
              app: sample-web-app
          spec:
            containers:
            - name: sample-web-app
              image: "node:16-alpine"
              imagePullPolicy: IfNotPresent
              ports:
              - containerPort: 3000
                protocol: TCP
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 300m
                  memory: 256Mi
  - path: service.yaml
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: sample-web-app
        labels:
          app: sample-web-app
      spec:
        type: ClusterIP
        ports:
        - port: 80
          targetPort: 3000
          protocol: TCP
          name: http
        selector:
          app: sample-web-app
  - path: serviceaccount.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sample-web-app
        labels:
          app: sample-web-app
  - path: role.yaml
    content: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: sample-web-app
        labels:
          app: sample-web-app
      rules:
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["get", "list", "watch"]
  - path: rolebinding.yaml
    content: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: sample-web-app
        labels:
          app: sample-web-app
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: sample-web-app
      subjects:
      - kind: ServiceAccount
        name: sample-web-app

valueDefinitions:
  replicaCount:
    metadata:
      description: "Number of replicas to run"
      label: "Replicas"
    type: number
    defaultValue: "1"
    targets:
      - chartName: eap-distr-simulator
        patch:
          op: replace
          path: /replicaCount
  ingressEnabled:
    metadata:
      description: "Enable ingress for external access"
      label: "Enable Ingress"
    type: boolean
    defaultValue: "false"
    targets:
      - chartName: eap-distr-simulator
        patch:
          op: replace
          path: /ingress/enabled
  ingressHost:
    metadata:
      description: "Hostname for the ingress"
      label: "Ingress Hostname"
    type: text
    defaultValue: "sample-web-app.example"
    targets:
      - chartName: eap-distr-simulator
        patch:
          op: replace
          path: /ingress/hosts/0/host
  resources:
    metadata:
      description: "Configure CPU/Memory resource limits"
      label: "Resource Limits"
    type: boolean
    defaultValue: "false"
    targets:
      - chartName: eap-distr-simulator
        valueTemplate: '{{if .}}{ "requests": { "cpu": "100m", "memory": "128Mi" }, "limits": { "cpu": "300m", "memory": "256Mi" } }{{else}}null{{end}}'
        patch:
          op: replace
          path: /resources

values:
  # Make sure base structure exists for valueDefinitions
  ingress:
    enabled: false
    hosts:
      - host: ""
        paths: 
          - path: /
            pathType: Prefix
  resources: null
  replicaCount: 1
  serviceAccount:
    create: false  # Disable automatic creation since we define it explicitly
    name: "sample-web-app"  # Use our explicitly defined service account

entrypoints:
  - name: web-ui
    serviceName: sample-web-app
    port: 80
    localPort: 3000
    scheme: http

references:
  - label: "Node.js Documentation"
    url: "https://nodejs.org/en/docs/"
  - label: "Repository"
    url: "https://github.com/pkhsu/glasskube-gitops-test/tree/main/apps/sample-web-app"
  - label: "Docker Hub"
    url: "https://hub.docker.com/_/node" 